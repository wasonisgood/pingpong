import pickle
import time

class Recorder:
    """
    Record the game progress and dump the progress to a file using pickle
    """

    def __init__(self, saving_directory):
        """
        Constructor

        @param saving_directory Specify the directory for saving files
        """
        self.__scene_info_list = []
        self.__saving_directory = saving_directory
        self.__create_directory()

    def __create_directory(self):
        import os
        if not os.path.exists(self.__saving_directory):
            os.mkdir(self.__saving_directory)

    def flush_to_file(self, filename = None):
        """
        Flush the stored objects to the file

        The store objects will be cleared.

        @param filename Specify the name of the file to be generated.
               If it is not specified, "YYYY-MM-DD_hh-mm-ss.pickle" is used.
        """
        if not filename:
            filename = time.strftime("%Y-%m-%d_%H-%M-%S") + ".pickle"

        filepath = self.__saving_directory + "/" + filename
        with open(filepath, "wb") as f:
            pickle.dump(self.__scene_info_list, f)

        self.__scene_info_list.clear()

    def record_scene_info(self, scene_info):
        """
        Record the scene info

        The received scene information will be stored in a list.

        @param scene_info The scene information
        """
        self.__scene_info_list.append(scene_info)


def get_record_handler(record_progress: bool, saving_status: dict, log_dir, \
    filename_generator = None):
    """
    A helper function for generating game progress recording handler

    If `record_progress` is True, it generates a Recorder for recording the game progress.
    It will return a handler which takes one argument for passing progress object,
    if the member of progress object matches one of the value specified in `saving_status`,
    the handler will invoke Recorder.flush_to_file(). The filename is generated by
    invoking `filename_generator` if it is specified.

    If `record_progress` is False, return a one parameter dummy function.

    @param record_progress Whether to record the game progress or not
    @param saving_status A dictionary for indicating the timing of saving the progress
           to a file. The key is the name of the member of the progress object,
           the value is a list of possible values of that member.
    @param log_dir The path of directory for saving log files
    @param finename_generator The callable object for generating filename
    """
    def _record_handler(progress_object):
        recorder.record_scene_info(progress_object)

        for member, values in saving_status.items():
            target_value = progress_object.__dict__.get(member, None)

            if target_value and target_value in values:
                filename = filename_generator() if filename_generator else None
                recorder.flush_to_file(filename)
                break

    if not record_progress:
        return lambda x: None

    recorder = Recorder(log_dir)
    return _record_handler